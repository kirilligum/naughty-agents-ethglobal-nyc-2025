   <
   <
   <
   Hardhat 3 is now production ready. Migrate now
   >
   >
   >
   [1]logo logo logo logo
     * [2]Home
     * [3]Documentation
     * [4]Plugins
     * [5]Hardhat 2

     *
     *
     *

   (BUTTON) A
   theme-switcher theme-switcher theme-switcher theme-switcher
   (BUTTON)
     * Hardhat 3
          + [6]Getting started
          + [7]Installation
          + [8]Project structure
          + [9]Writing a smart contract
          + [10]Testing your contracts
          + [11]Solidity tests
          + [12]TypeScript tests
          + [13]Writing scripts
          + [14]Deploying contracts
     * Learn more
          + [15]What's new in Hardhat 3
          + [16]Beta status
          + [17]Writing Solidity tests
          + [18]Using viem
          + [19]Deploying contracts
          + [20]Verifying contracts
          + [21]Configuring the compiler
          + [22]Configuration variables
          + [23]Cookbook
     * Migrate to Hardhat 3
          + [24]From Hardhat 2
     * Reference
          + [25]Configuration
          + [26]Error codes
          + [27]Node.js support
     * Troubleshooting
          + [28]Getting help
     * Plugins
          + [29]Official plugins
          + [30]Community plugins
     * Hardhat 2
          + [31]Documentation
     * Other Hardhat components
          + [32]Hardhat Ignition
          + [33]Hardhat VSCode
          + [34]Hardhat Network Helpers

     * [35]Home
     * [36]Documentation
     * [37]Plugins
     * [38]Hardhat 2
     * [39]github

     *
     *
     *

   (BUTTON) A
   theme-switcher theme-switcher theme-switcher theme-switcher
   (BUTTON) Menu

     *
     *
     *

   (BUTTON) A
   theme-switcher theme-switcher theme-switcher theme-switcher

[40]#Verifying smart contracts

   Smart contract verification is used to prove that a deployed contract's
   bytecode comes from a specific source code. This allows users and tools
   to inspect the original source on block explorers, like Etherscan and
   Blockscout.

   In this guide, you'll learn how to verify your contracts using the
   hardhat-verify plugin.

[41]#Setup

   If you initialized your project using hardhat --init, you don't need to
   do anything: hardhat-verify is already included as part of the template
   project.

   If you want to add the plugin manually:
    1. Install the plugin:
       npm
       pnpm
(BUTTON)npm install --save-dev @nomicfoundation/hardhat-verify

(BUTTON)pnpm install --save-dev @nomicfoundation/hardhat-verify

    2. Add it to the list of plugins in your Hardhat configuration:
(BUTTON)import hardhatVerify from "@nomicfoundation/hardhat-verify";

const config: HardhatUserConfig = {
  plugins: [
    hardhatVerify,
    // ...other plugins...
  ],
  // ...other config...
};

export default config;

[42]#Configuration

   The hardhat-verify plugin adds a verify object to the Hardhat
   configuration. With it, you can configure the different block explorers
   to verify your contracts on.

   To verify contracts on Etherscan, you need to set an API key in your
   Hardhat configuration:
(BUTTON)const config: HardhatUserConfig = {
  // ...
  verify: {
    etherscan: {
      apiKey: "YOUR_ETHERSCAN_API_KEY",
    },
  },
};

   You can get an Etherscan API key by following [43]this guide.

   TIP

   In the previous version of the Etherscan API, you needed a different
   API key for each chain. With Etherscan V2, a single API key works
   across all networks.

   To verify contracts on Blockscout, you don't need to set an API key,
   nor any config.

   You can also disable a block explorer by setting its enabled property
   to false. For example, you can disable Blockscout verification like
   this:
(BUTTON)const config: HardhatUserConfig = {
  // ...
  verify: {
    blockscout: {
      enabled: false,
    },
  },
};

[44]#Verifying a contract

   To verify a contract, run the verify task with the contract's address
   and the network you deployed it to:
(BUTTON)npx hardhat verify --network sepolia 0x1234567890...

   If your contract has constructor arguments, you have to also pass the
   values that were used during deployment. For example, if the contract
   received a string and a uint as constructor parameters:
(BUTTON)npx hardhat verify --network sepolia 0x1234567890... "Hello" 1000

   If the arguments are too complex to pass directly in the shell—for
   example, an array of numbers—you can define them in a TypeScript or
   JavaScript file:
(BUTTON)// constructor-args.ts
const constructorArgs = ["Hello", [1000, 2000]];

export default constructorArgs;

   and then pass it with the --constructor-args-path flag:
(BUTTON)npx hardhat verify --network sepolia --constructor-args-path constructor
-args.ts 0x1234567890...

[45]#Using different build profiles

   By default, the verify task uses the production build profile, as this
   is the recommended build profile to build your contracts before
   deploying them. If you deploy your contracts with Hardhat Ignition, you
   automatically use the production build profile.

   If you want to use a different build profile, you can pass the
   --build-profile flag:
(BUTTON)npx hardhat verify --network sepolia --build-profile default 0x123456789
0...

[46]#Verifying contracts on different block explorers

   The plugin currently supports Etherscan and Blockscout. You can use
   subtasks to verify on each of the block explorers:
(BUTTON)npx hardhat verify etherscan ...

   They have the same interface, but verify on a different block explorer.

   Running verify without any subtask will verify on both Etherscan and
   Blockscout.

[47]#Verifying on a block explorer of a different network

   If you want to verify a contract on a block explorer of a network that
   isn't natively supported by the plugin, you can set a chain descriptor
   in your Hardhat configuration to add support for that network.

   Adding a chain descriptor for a network called "ExampleChain", with
   chain id 123456, would look like this:
(BUTTON)const config: HardhatUserConfig = {
  // ...
  chainDescriptors: {
    // Example chain
    123456: {
      name: "ExampleChain",
      blockExplorers: {
        etherscan: {
          name: "ExampleScan",
          url: "https://example.scan",
          apiUrl: "https://example.scan/api",
        },
        // other explorers...
      },
    },
  },
};

[48]#Troubleshooting

   Your verification might fail for a variety of reasons. Here are some
   common issues and how to fix them:
     * Verifying immediately after deploying. Your contracts may not have
       been indexed by the block explorer yet, causing the verification to
       fail. Normally, waiting a minute is enough for it to work.
     * Wrong constructor arguments. Double-check that your constructor
       arguments are correct.
     * Using code that is different from the one used for deployment. If
       you are trying to verify a contract that you have deployed weeks
       ago, then chances are that the code has changed in the meantime.
       Double-check that you are using the correct code.
     * Using a different build profile. If you are using a different build
       profile than the one used for deployment, then the bytecode will be
       different, causing the verification to fail. Try using
       --build-profile with other profiles to verify your contract,
       beginning with default. You may also need to run hardhat build with
       the same build profile to generate the correct artifacts.

   [49]Help us improve this page
   Last Updated:8/13/2025, 6:37:37 PM

References

   Visible links:
   1. https://hardhat.org/
   2. https://hardhat.org/
   3. https://hardhat.org/docs/getting-started
   4. https://hardhat.org/plugins
   5. https://hardhat.org/hardhat2
   6. https://hardhat.org/docs/getting-started#getting-started-with-hardhat-3
   7. https://hardhat.org/docs/getting-started#installation
   8. https://hardhat.org/docs/getting-started#project-structure
   9. https://hardhat.org/docs/getting-started#writing-a-smart-contract
  10. https://hardhat.org/docs/getting-started#testing-your-contracts
  11. https://hardhat.org/docs/getting-started#solidity-tests
  12. https://hardhat.org/docs/getting-started#typescript-tests
  13. https://hardhat.org/docs/getting-started#writing-scripts-to-interact-with-the-network
  14. https://hardhat.org/docs/getting-started#deploying-contracts
  15. https://hardhat.org/docs/learn-more/whats-new
  16. https://hardhat.org/docs/learn-more/beta-status
  17. https://hardhat.org/docs/learn-more/writing-solidity-tests
  18. https://hardhat.org/docs/learn-more/using-viem
  19. https://hardhat.org/docs/learn-more/deploying-contracts
  20. https://hardhat.org/docs/learn-more/smart-contract-verification
  21. https://hardhat.org/docs/learn-more/configuring-the-compiler
  22. https://hardhat.org/docs/learn-more/configuration-variables
  23. https://hardhat.org/docs/learn-more/cookbook
  24. https://hardhat.org/migrate-from-hardhat2
  25. https://hardhat.org/docs/reference/configuration
  26. https://hardhat.org/docs/reference/errors
  27. https://hardhat.org/docs/reference/nodejs-support
  28. https://hardhat.org/docs/troubleshooting/getting-help
  29. https://hardhat.org/plugins#official-plugins
  30. https://hardhat.org/plugins#community-plugins
  31. https://hardhat.org/hardhat2
  32. https://hardhat.org/ignition/docs
  33. https://hardhat.org/hardhat-vscode/docs
  34. https://hardhat.org/hardhat-network-helpers/docs
  35. https://hardhat.org/
  36. https://hardhat.org/docs/getting-started
  37. https://hardhat.org/plugins
  38. https://hardhat.org/hardhat2
  39. https://github.com/NomicFoundation/hardhat
  40. https://hardhat.org/docs/learn-more/smart-contract-verification#verifying-smart-contracts
  41. https://hardhat.org/docs/learn-more/smart-contract-verification#setup
  42. https://hardhat.org/docs/learn-more/smart-contract-verification#configuration
  43. https://docs.etherscan.io/etherscan-v2/getting-an-api-key
  44. https://hardhat.org/docs/learn-more/smart-contract-verification#verifying-a-contract
  45. https://hardhat.org/docs/learn-more/smart-contract-verification#using-different-build-profiles
  46. https://hardhat.org/docs/learn-more/smart-contract-verification#verifying-contracts-on-different-block-explorers
  47. https://hardhat.org/docs/learn-more/smart-contract-verification#verifying-on-a-block-explorer-of-a-different-network
  48. https://hardhat.org/docs/learn-more/smart-contract-verification#troubleshooting
  49. https://github.com/NomicFoundation/hardhat-website/edit/main/src/content/docs/learn-more/smart-contract-verification.md

   Hidden links:
  51. https://hardhat.org/docs
  52. https://github.com/NomicFoundation/hardhat
  53. https://twitter.com/HardhatHQ
  54. https://hardhat.org/discord
  55. https://github.com/NomicFoundation/hardhat
  56. https://twitter.com/HardhatHQ
  57. https://hardhat.org/discord
  58. https://github.com/NomicFoundation/hardhat
  59. https://twitter.com/HardhatHQ
  60. https://hardhat.org/discord
