   <
   <
   <
   Hardhat 3 is now production ready. Migrate now
   >
   >
   >
   [1]logo logo logo logo
     * [2]Home
     * [3]Documentation
     * [4]Plugins
     * [5]Hardhat 2

     *
     *
     *

   (BUTTON) A
   theme-switcher theme-switcher theme-switcher theme-switcher
   (BUTTON)
     * Hardhat 3
          + [6]Getting started
          + [7]Installation
          + [8]Project structure
          + [9]Writing a smart contract
          + [10]Testing your contracts
          + [11]Solidity tests
          + [12]TypeScript tests
          + [13]Writing scripts
          + [14]Deploying contracts
     * Learn more
          + [15]What's new in Hardhat 3
          + [16]Beta status
          + [17]Writing Solidity tests
          + [18]Using viem
          + [19]Deploying contracts
          + [20]Verifying contracts
          + [21]Configuring the compiler
          + [22]Configuration variables
          + [23]Cookbook
     * Migrate to Hardhat 3
          + [24]From Hardhat 2
     * Reference
          + [25]Configuration
          + [26]Error codes
          + [27]Node.js support
     * Troubleshooting
          + [28]Getting help
     * Plugins
          + [29]Official plugins
          + [30]Community plugins
     * Hardhat 2
          + [31]Documentation
     * Other Hardhat components
          + [32]Hardhat Ignition
          + [33]Hardhat VSCode
          + [34]Hardhat Network Helpers

     * [35]Home
     * [36]Documentation
     * [37]Plugins
     * [38]Hardhat 2
     * [39]github

     *
     *
     *

   (BUTTON) A
   theme-switcher theme-switcher theme-switcher theme-switcher
   (BUTTON) Menu

     *
     *
     *

   (BUTTON) A
   theme-switcher theme-switcher theme-switcher theme-switcher

[40]#Getting started with Hardhat 3

   TIP

   Hardhat 3 is production-ready and you can migrate today! We'll keep it
   in beta status as we work on missing features and stabilize it in the
   near future.

   Hardhat is a flexible and extensible development environment for
   Ethereum software. It helps you write, test, debug and deploy your
   smart contracts with ease, whether you're building a simple prototype
   or a complex production system.

   This guide will walk you through the installation of our recommended
   setup, but as most of Hardhat's functionality comes from plugins, you
   are free to customize it or choose a completely different path.

[41]#Installation

   To get started with Hardhat 3, you'll need [42]Node.js v22 or later
   installed on your system, along with a package manager such as [43]npm
   or [44]pnpm.

   First, create a new directory for your project:
(BUTTON)mkdir hardhat-example
cd hardhat-example

   Once that's done, initialize your Hardhat project by running:
   npm
   pnpm
(BUTTON)npx hardhat --init

(BUTTON)pnpm dlx hardhat --init

   This command will prompt you with a few configuration options. You can
   accept the default answers to quickly scaffold a working setup.

   Using the defaults will:
     * Initialize the project in the current directory.
     * Use the sample project that includes the [45]Node.js test runner
       and [46]viem.
     * Automatically install all the required dependencies.

   After the setup is complete, you'll have a fully working Hardhat 3
   project with everything you need to get started. Run the Hardhat help
   to verify the project was set up correctly:
   npm
   pnpm
(BUTTON)npx hardhat --help

(BUTTON)pnpm hardhat --help

[47]#Project structure

   The Hardhat project initialization from the previous section creates
   the following file structure:
(BUTTON)hardhat.config.ts

contracts
├── Counter.sol
└── Counter.t.sol

test
└── Counter.ts

ignition
└── modules
    └── Counter.ts

scripts
└── send-op-tx.ts

   Here's a quick overview of these files and directories:
     * hardhat.config.ts: The main configuration file for your project. It
       defines settings like the Solidity compiler version, network
       configurations, and the plugins and tasks your project uses.
     * contracts: Contains your project's Solidity contracts. You can also
       include Solidity test files here by using the .t.sol extension.
     * test: Used for TypeScript integration tests. You can also include
       Solidity test files here.
     * ignition: Holds your [48]Hardhat Ignition deployment modules, which
       describe how your contracts should be deployed.
     * scripts: A place for any custom scripts that automate parts of your
       workflow. Scripts have full access to Hardhat's runtime and can use
       plugins, connect to networks, deploy contracts, and more.

[49]#Writing a smart contract

   TIP

   [50]Hardhat for Visual Studio Code is the official Hardhat extension
   that adds advanced support for Solidity to VSCode. If you use Visual
   Studio Code, give it a try!

   Writing a smart contract with Hardhat is as easy as writing a Solidity
   file inside the contracts directory. For example, your
   contracts/Counter.sol should look like this:
(BUTTON)pragma solidity ^0.8.28;

contract Counter {
  uint public x;

  event Increment(uint by);

  function inc() public {
    x++;
    emit Increment(1);
  }

  function incBy(uint by) public {
    require(by > 0, "incBy: increment should be positive");
    x += by;
    emit Increment(by);
  }
}

   Hardhat will automatically detect it, and compile it with the correct
   version of Solidity based on its pragma statement and your Hardhat
   configuration. All you need to do is run:
   npm
   pnpm
(BUTTON)npx hardhat build

(BUTTON)pnpm hardhat build

   You can learn more about how to customize your Solidity version and
   settings in [51]this guide.

[52]#Testing your contracts

   Tests are a critical part of any Ethereum project. Hardhat lets you
   write tests in both Solidity and TypeScript, giving you flexibility to
   choose the right tool for each situation.

   Hardhat tests run against a local in-memory blockchain, which is much
   faster than using a real network and doesn't require you to spend ETH
   or obtain testnet tokens.

[53]#Solidity tests

   Hardhat 3 has full support for writing Solidity tests. The sample
   project includes a Solidity test file at contracts/Counter.t.sol:
(BUTTON)import { Counter } from "./Counter.sol";
import { Test } from "forge-std/Test.sol";

contract CounterTest is Test {
  Counter counter;

  function setUp() public {
    counter = new Counter();
  }

  function test_InitialValue() public view {
    require(counter.x() == 0, "Initial value should be 0");
  }

  function testFuzz_Inc(uint8 x) public {
    for (uint8 i = 0; i < x; i++) {
      counter.inc();
    }
    require(counter.x() == x, "Value after calling inc x times should be x");
  }

  function test_IncByZero() public {
    vm.expectRevert();
    counter.incBy(0);
  }
}

   You can run all the tests in your project—both Solidity and
   TypeScript—using the test task:
   npm
   pnpm
(BUTTON)npx hardhat test

(BUTTON)pnpm hardhat test

   If you only want to run your Solidity tests, you can use this instead:
   npm
   pnpm
(BUTTON)npx hardhat test solidity

(BUTTON)pnpm hardhat test solidity

   When you run this command, Hardhat will:
    1. Compile your contracts and tests.
    2. Gather all your test files. These include all .t.sol files in the
       contracts/ directory and all .sol files in the test/ directory.
    3. Deploy each test contract defined in those files.
    4. Call every function that starts with test. If any of these calls
       revert, the corresponding test is marked as failed.

   In the example above:
     * test_InitialValue and test_IncByZero are unit tests: they take no
       parameters and run once per test execution.
     * testFuzz_Inc is a fuzz test: since it takes a parameter, Hardhat
       will run it multiple times using random inputs. If any of those
       runs revert, the fuzz test fails and the failing input is printed.

   If any of your tests fails, Hardhat will provide detailed Solidity
   stack traces to help you understand why. To see them in action, first
   comment out the vm.expectRevert(); line in test_IncByZero:
(BUTTON)function test_IncByZero() public {
    // vm.expectRevert();
  counter.incBy(0);
}

   Then run the last command again and you'll get a stack-trace along with
   the test failure:
(BUTTON)Failure (1): test_IncByZero()
Reason: revert: incBy: increment should be positive
  at Counter.incBy (contracts/Counter.sol:15)
  at CounterTest.test_IncByZero (contracts/Counter.t.sol:30)

   This lets you quickly pinpoint the issue, even across deeply nested
   calls.

   Learn more at [54]writing Solidity tests here.

[55]#TypeScript tests

   Solidity tests are ideal for fast, focused unit testing, but they fall
   short in certain situations:
     * Complex test logic, where a general-purpose language like
       TypeScript is more expressive and ergonomic than Solidity.
     * Tests that require realistic blockchain behavior, such as advancing
       blocks or working with gas costs. While cheatcodes can simulate
       this to some extent, excessive mocking is hard to maintain and can
       lead to inaccurate assumptions.
     * End-to-end scenarios, where you want to test your contracts as they
       would behave in production, involving multiple transactions,
       clients, and user interactions.

   To support these use cases, Hardhat lets you write tests in TypeScript
   (or JavaScript), using the [56]Node.js test runner or other frameworks
   like [57]Mocha. These tests run in a real Node.js environment and
   interact with your contracts through JSON-RPC, making them more
   representative of actual usage.

   The sample project comes with a TypeScript test file at
   test/Counter.ts, which includes the following test:
(BUTTON)it("The sum of the Increment events should match the current value", asy
nc function () {
  const counter = await viem.deployContract("Counter");

  // run a series of increments
  for (let i = 1n; i <= 10n; i++) {
    await counter.write.incBy([i]);
  }

  const events = await publicClient.getContractEvents({
    address: counter.address,
    abi: counter.abi,
    eventName: "Increment",
    fromBlock: 0n,
    strict: true,
  });

  // check that the aggregated events match the current value
  let total = 0n;
  for (const event of events) {
    total += event.args.by;
  }

  assert.equal(total, await counter.read.x());
});

   This test deploys the Counter contract, calls incBy multiple times
   (each in a separate transaction), collects all the emitted Increment
   events, and verifies that their sum matches the contract's final value.

   Writing this same test in Solidity is possible, but less convenient,
   and the test would be executed in a different context — closer to a
   single transaction calling the contract multiple times, than different
   users interacting with it over time. This makes TypeScript a better fit
   for scenarios that depend on realistic transaction flows or blockchain
   behavior.

   To run your TypeScript tests, use the test nodejs task:
   npm
   pnpm
(BUTTON)npx hardhat test nodejs

(BUTTON)pnpm hardhat test nodejs

   You can write any TypeScript code you want in your tests, as they are
   normal TypeScript files with access to Hardhat. In this example, we use
   viem to interact with the contracts and test the expected behavior. To
   learn more about how to use viem with Hardhat, read [58]this guide.

[59]#Solidity vs TypeScript tests

   Solidity tests run directly on the EVM and are great for unit tests.
   They execute in a controlled environment, making them fast and
   deterministic. They also have access to test-related EVM extensions,
   normally called cheatcodes, which allow you to build complex tests in
   Solidity.

   TypeScript tests, on the other hand, use a fully-simulated local
   blockchain and interact with it through JSON-RPC. This allows you to
   write more complex or end-to-end tests using the full power of a
   general-purpose programming language and a realistic blockchain
   simulation. You can use any Ethereum TypeScript library, like [60]viem
   or [61]ethers.js to write your tests.

   Use Solidity when you want low-level, efficient, EVM-native tests. Use
   TypeScript when you want richer tooling, more flexible assertions, or
   to test blockchain-level interactions, like workflows involving
   multiple transactions.

[62]#Writing scripts to interact with the network

   A script in Hardhat is just a TypeScript or JavaScript file with access
   to your contracts, configuration, and any other functionality that
   Hardhat provides. You can use them to run custom logic or to automate
   workflows.

   By convention, scripts are located in the scripts/ directory. You can
   name them however you like and use either .ts or .js extensions.

   The sample project includes two scripts. One of them,
   scripts/send-op-tx.ts, shows how you can simulate a local Optimism-like
   network and send a transaction on it.

   To run a script, you can use the run task:
   npm
   pnpm
(BUTTON)npx hardhat run scripts/send-op-tx.ts

(BUTTON)pnpm hardhat run scripts/send-op-tx.ts

   By doing this, Hardhat will compile your contracts and run your script
   with access to all of Hardhat's functionality.

[63]#Deploying contracts

   The example project comes with our official deployment solution:
   Hardhat Ignition, a declarative system for deploying smart contracts.

   With Hardhat Ignition, you define the smart contract instances you want
   to deploy, along with any operations you want to perform on them. These
   definitions are grouped into Ignition Modules, which are then analyzed
   and executed in the most efficient way. This includes sending
   independent transactions in parallel, recovering from errors, and
   resuming interrupted deployments.

   Ignition modules are located in the ignition/modules/ directory. This
   is the example module, ignition/modules/Counter.ts:
(BUTTON)import { buildModule } from "@nomicfoundation/hardhat-ignition/modules";

export default buildModule("CounterModule", (m) => {
  const counter = m.contract("Counter");

  m.call(counter, "incBy", [5n]);

  return { counter };
});

   Inside a module you call functions, like m.contract and m.call, to
   describe the deployment you want to execute. To learn more about how to
   write an Ignition module, please read [64]this document.

   Modules are deployed with the ignition deploy task. To check that the
   deployment works correctly, let's run it in a simulated network:
   npm
   pnpm
(BUTTON)npx hardhat ignition deploy ignition/modules/Counter.ts

(BUTTON)pnpm hardhat ignition deploy ignition/modules/Counter.ts

   Your deployment was successfully executed in a network simulated by
   Hardhat! To learn more about how to deploy contracts with Ignition,
   including how to connect to a real network and how to manage your
   private keys, please read [65]this guide.

[66]#Learn more

   To learn more about Hardhat, check out these other guides:
     * [67]Writing Solidity tests
     * [68]Using Viem with Hardhat
     * [69]Deploying contracts
     * [70]Configuring the compiler
     * [71]Differences with Hardhat 2

   and join our [72]Hardhat 3 Alpha Telegram group to share feedback and
   stay updated on new releases.
   [73]Help us improve this page
   Last Updated:8/13/2025, 8:27:22 PM

References

   Visible links:
   1. https://hardhat.org/
   2. https://hardhat.org/
   3. https://hardhat.org/docs/getting-started
   4. https://hardhat.org/plugins
   5. https://hardhat.org/hardhat2
   6. https://hardhat.org/docs/getting-started#getting-started-with-hardhat-3
   7. https://hardhat.org/docs/getting-started#installation
   8. https://hardhat.org/docs/getting-started#project-structure
   9. https://hardhat.org/docs/getting-started#writing-a-smart-contract
  10. https://hardhat.org/docs/getting-started#testing-your-contracts
  11. https://hardhat.org/docs/getting-started#solidity-tests
  12. https://hardhat.org/docs/getting-started#typescript-tests
  13. https://hardhat.org/docs/getting-started#writing-scripts-to-interact-with-the-network
  14. https://hardhat.org/docs/getting-started#deploying-contracts
  15. https://hardhat.org/docs/learn-more/whats-new
  16. https://hardhat.org/docs/learn-more/beta-status
  17. https://hardhat.org/docs/learn-more/writing-solidity-tests
  18. https://hardhat.org/docs/learn-more/using-viem
  19. https://hardhat.org/docs/learn-more/deploying-contracts
  20. https://hardhat.org/docs/learn-more/smart-contract-verification
  21. https://hardhat.org/docs/learn-more/configuring-the-compiler
  22. https://hardhat.org/docs/learn-more/configuration-variables
  23. https://hardhat.org/docs/learn-more/cookbook
  24. https://hardhat.org/migrate-from-hardhat2
  25. https://hardhat.org/docs/reference/configuration
  26. https://hardhat.org/docs/reference/errors
  27. https://hardhat.org/docs/reference/nodejs-support
  28. https://hardhat.org/docs/troubleshooting/getting-help
  29. https://hardhat.org/plugins#official-plugins
  30. https://hardhat.org/plugins#community-plugins
  31. https://hardhat.org/hardhat2
  32. https://hardhat.org/ignition/docs
  33. https://hardhat.org/hardhat-vscode/docs
  34. https://hardhat.org/hardhat-network-helpers/docs
  35. https://hardhat.org/
  36. https://hardhat.org/docs/getting-started
  37. https://hardhat.org/plugins
  38. https://hardhat.org/hardhat2
  39. https://github.com/NomicFoundation/hardhat
  40. https://hardhat.org/docs/getting-started#getting-started-with-hardhat-3
  41. https://hardhat.org/docs/getting-started#installation
  42. https://nodejs.org/
  43. https://www.npmjs.com/
  44. https://pnpm.io/
  45. https://nodejs.org/api/test.html
  46. https://viem.sh/
  47. https://hardhat.org/docs/getting-started#project-structure
  48. https://hardhat.org/ignition
  49. https://hardhat.org/docs/getting-started#writing-a-smart-contract
  50. https://hardhat.org/hardhat-vscode
  51. https://hardhat.org/docs/learn-more/configuring-the-compiler
  52. https://hardhat.org/docs/getting-started#testing-your-contracts
  53. https://hardhat.org/docs/getting-started#solidity-tests
  54. https://hardhat.org/docs/learn-more/writing-solidity-tests
  55. https://hardhat.org/docs/getting-started#typescript-tests
  56. https://nodejs.org/api/test.html
  57. https://mochajs.org/
  58. https://hardhat.org/docs/learn-more/using-viem
  59. https://hardhat.org/docs/getting-started#solidity-vs-typescript-tests
  60. https://viem.sh/
  61. https://docs.ethers.org/v5/
  62. https://hardhat.org/docs/getting-started#writing-scripts-to-interact-with-the-network
  63. https://hardhat.org/docs/getting-started#deploying-contracts
  64. https://hardhat.org/ignition/docs/guides/creating-modules
  65. https://hardhat.org/docs/learn-more/deploying-contracts
  66. https://hardhat.org/docs/getting-started#learn-more
  67. https://hardhat.org/docs/learn-more/writing-solidity-tests
  68. https://hardhat.org/docs/learn-more/using-viem
  69. https://hardhat.org/docs/learn-more/deploying-contracts
  70. https://hardhat.org/docs/learn-more/configuring-the-compiler
  71. https://hardhat.org/docs/learn-more/comparison
  72. https://hardhat.org/hardhat3-alpha-telegram-group
  73. https://github.com/NomicFoundation/hardhat-website/edit/main/src/content/docs/getting-started/index.md

   Hidden links:
  75. https://hardhat.org/docs
  76. https://github.com/NomicFoundation/hardhat
  77. https://twitter.com/HardhatHQ
  78. https://hardhat.org/discord
  79. https://github.com/NomicFoundation/hardhat
  80. https://twitter.com/HardhatHQ
  81. https://hardhat.org/discord
  82. https://github.com/NomicFoundation/hardhat
  83. https://twitter.com/HardhatHQ
  84. https://hardhat.org/discord
