   <
   <
   <
   Hardhat 3 is now production ready. Migrate now
   >
   >
   >
   [1]logo logo logo logo
     * [2]Home
     * [3]Documentation
     * [4]Plugins
     * [5]Hardhat 2

     *
     *
     *

   (BUTTON) A
   theme-switcher theme-switcher theme-switcher theme-switcher
   (BUTTON)
     * Hardhat 3
          + [6]Getting started
          + [7]Installation
          + [8]Project structure
          + [9]Writing a smart contract
          + [10]Testing your contracts
          + [11]Solidity tests
          + [12]TypeScript tests
          + [13]Writing scripts
          + [14]Deploying contracts
     * Learn more
          + [15]What's new in Hardhat 3
          + [16]Beta status
          + [17]Writing Solidity tests
          + [18]Using viem
          + [19]Deploying contracts
          + [20]Verifying contracts
          + [21]Configuring the compiler
          + [22]Configuration variables
          + [23]Cookbook
     * Migrate to Hardhat 3
          + [24]From Hardhat 2
     * Reference
          + [25]Configuration
          + [26]Error codes
          + [27]Node.js support
     * Troubleshooting
          + [28]Getting help
     * Plugins
          + [29]Official plugins
          + [30]Community plugins
     * Hardhat 2
          + [31]Documentation
     * Other Hardhat components
          + [32]Hardhat Ignition
          + [33]Hardhat VSCode
          + [34]Hardhat Network Helpers

     * [35]Home
     * [36]Documentation
     * [37]Plugins
     * [38]Hardhat 2
     * [39]github

     *
     *
     *

   (BUTTON) A
   theme-switcher theme-switcher theme-switcher theme-switcher
   (BUTTON) Menu

     *
     *
     *

   (BUTTON) A
   theme-switcher theme-switcher theme-switcher theme-switcher

[40]#How to use viem with Hardhat

   [41]viem is a modern, type-safe library to deploy contracts, manage
   accounts, read chain state, and more. It's the library we recommend for
   interacting with Ethereum. You can integrate viem with Hardhat by using
   the hardhat-viem plugin.

[42]#Setup

   If you have already initialized a viem-based project using hardhat
   --init, you don't need to do anything else.

   If you want to add the plugin manually:
    1. Install the plugin:
(BUTTON)npm install --save-dev @nomicfoundation/hardhat-viem

    2. Add it to the list of plugins in your Hardhat configuration:
(BUTTON)import hardhatViem from "@nomicfoundation/hardhat-viem";

const config: HardhatUserConfig = {
  plugins: [
    hardhatViem,
    // ...other plugins...
  ],
  // ...other config...
};

export default config;

[43]#Connecting to networks

   In Hardhat, you interact with networks using network connections. You
   can create connections with the network manager, which can be imported
   directly from Hardhat:
(BUTTON)import { network } from "hardhat";

const connection = await network.connect();

   Plugins can extend the objects returned by the network manager. The
   hardhat-viem plugin extends them with a viem property, which provides
   helpers to interact with the network you connected to:
(BUTTON)const { viem } = await network.connect();

const publicClient = await viem.getPublicClient();
console.log("Latest block number:", await publicClient.getBlockNumber());

[44]#Using viem clients

   Viem functionality is grouped into [45]clients. The hardhat-viem plugin
   helps you create viem clients more easily.

   You can create a [46]public client using the getPublicClient method:
(BUTTON)const { viem } = await network.connect();

const publicClient = await viem.getPublicClient();

console.log("Latest block number:", await publicClient.getBlockNumber());

   Use the getWalletClients function to obtain [47]wallet clients. It
   returns an array of wallet clients, one for each account set up in the
   Hardhat config:
(BUTTON)const [senderClient, receiverClient] = await viem.getWalletClients();

await senderClient.sendTransaction({
  to: receiverClient.account.address,
  value: 10n ** 18n,
});

   Finally, if you are connecting to a Hardhat network, you can call
   getTestClient to get a [48]test client:
(BUTTON)const testClient = await viem.getTestClient();

await testClient.mine({
  blocks: 10,
});

[49]#Deploying and interacting with contracts

   hardhat-viem includes a deployContract function to deploy contracts
   defined in the project. This function returns a viem [50]contract
   instance of the deployed contract:
(BUTTON)import { network } from "hardhat";

const { viem } = await network.connect();
const counter = await viem.deployContract("Counter");

await counter.write.inc();

console.log("Counter value:", await counter.read.x());

   If the constructor takes parameters, you can pass them as the second
   argument:
(BUTTON)const initialValue = 10n;
const counter = await viem.deployContract("Counter", [initialValue]);

   By default, contracts are deployed from the first account defined in
   the Hardhat configuration, but you can specify a different one:
(BUTTON)const [wallet1, wallet2] = await viem.getWalletClients();

const counter = await viem.deployContract("Counter", [10n], {
  client: {
    wallet: wallet2,
  },
});

   The deployContract function waits until the contract is deployed. If
   you just want to send the deployment without waiting until it's mined,
   you can use sendDeploymentTransaction:
(BUTTON)const { deploymentTransaction } = await viem.sendDeploymentTransaction(
  "Counter",
  [10n],
  {
    client: {
      wallet: wallet2,
    },
  }
);

   All the previous examples deploy a new contract instance, but sometimes
   you need to interact with an already deployed contract. In those cases,
   use the getContractAt function:
(BUTTON)const counterAddress = "0x1234567890123456789012345678901234567890";
const counter = await viem.getContractAt("Counter", counterAddress);

[51]#Using contracts from an npm dependency

   You can also use a contract defined in an npm dependency with
   hardhat-viem.

   To do this, configure Hardhat to compile the contract and generate its
   artifacts. Read [52]this guide to learn how.

   This lets you to use the hardhat-viem helpers to interact with it, just
   like any other contract in your project.

[53]#Viem assertions

   The example project includes the hardhat-viem-assertions plugin, which
   helps you write expressive TypeScript tests in viem-based projects.

   This plugin adds an assertions property to the viem object, giving you
   utility functions to test contract behavior more easily. For example,
   the following test checks that calling a function emits the expected
   event:
(BUTTON)it("Should emit the Increment event when calling the inc() function", as
ync function () {
  const counter = await viem.deployContract("Counter");

  await viem.assertions.emitWithArgs(
    counter.write.inc(),
    counter,
    "Increment",
    [1n]
  );
});

   You can also assert that transactions revert (and why), or check that
   account balances change as expected.

[54]#Type-safe contract interactions

   Viem has powerful typing capabilities, triggering compilation errors
   when you make mistakes like using the wrong type in a function argument
   or sending value to a non-payable function:
(BUTTON)// doesn't compile if getItem expects a number but receives a string:
await contract.read.getItem(["3"]);

// doesn't compile if setItem is not payable:
await contract.write.setItem([3, "three"], {
  value: 1000n,
});

   When using viem on its own, you need to explicitly use the contract's
   ABI to get properly inferred types. The hardhat-viem plugin handles
   this automatically in helpers like deployContract or getContractAt.

[55]#Troubleshooting contract type errors

   Contract types are updated when the project is compiled. If you are
   getting a compilation error that you don't expect, make sure you've run
   hardhat build.

   Note that VSCode may not always pick up the type updates automatically.
   If you are still getting unexpected TypeScript errors after compiling
   the project, open the [56]Command Palette and run TypeScript: Reload
   Project.

[57]#Using viem as a module

   The viem object in the connection only includes the functionality added
   by hardhat-viem. To use viem's own functionality, import it from the
   viem module:
(BUTTON)import { keccak256 } from "viem";
import { network } from "hardhat";

const { viem } = await network.connect();

   Keep in mind that you can get a name clash if you use a namespace
   import:
(BUTTON)import * as viem from "viem";
import { network } from "hardhat";

// this is an error because viem is already declared
const { viem } = await network.connect();

   One way to work around this problem is to use a different name for the
   Hardhat viem object:
(BUTTON)const { viem: hhViem } = await network.connect();

const publicClient = await hhViem.getPublicClient();

   [58]Help us improve this page
   Last Updated:8/13/2025, 6:37:37 PM

References

   Visible links:
   1. https://hardhat.org/
   2. https://hardhat.org/
   3. https://hardhat.org/docs/getting-started
   4. https://hardhat.org/plugins
   5. https://hardhat.org/hardhat2
   6. https://hardhat.org/docs/getting-started#getting-started-with-hardhat-3
   7. https://hardhat.org/docs/getting-started#installation
   8. https://hardhat.org/docs/getting-started#project-structure
   9. https://hardhat.org/docs/getting-started#writing-a-smart-contract
  10. https://hardhat.org/docs/getting-started#testing-your-contracts
  11. https://hardhat.org/docs/getting-started#solidity-tests
  12. https://hardhat.org/docs/getting-started#typescript-tests
  13. https://hardhat.org/docs/getting-started#writing-scripts-to-interact-with-the-network
  14. https://hardhat.org/docs/getting-started#deploying-contracts
  15. https://hardhat.org/docs/learn-more/whats-new
  16. https://hardhat.org/docs/learn-more/beta-status
  17. https://hardhat.org/docs/learn-more/writing-solidity-tests
  18. https://hardhat.org/docs/learn-more/using-viem
  19. https://hardhat.org/docs/learn-more/deploying-contracts
  20. https://hardhat.org/docs/learn-more/smart-contract-verification
  21. https://hardhat.org/docs/learn-more/configuring-the-compiler
  22. https://hardhat.org/docs/learn-more/configuration-variables
  23. https://hardhat.org/docs/learn-more/cookbook
  24. https://hardhat.org/migrate-from-hardhat2
  25. https://hardhat.org/docs/reference/configuration
  26. https://hardhat.org/docs/reference/errors
  27. https://hardhat.org/docs/reference/nodejs-support
  28. https://hardhat.org/docs/troubleshooting/getting-help
  29. https://hardhat.org/plugins#official-plugins
  30. https://hardhat.org/plugins#community-plugins
  31. https://hardhat.org/hardhat2
  32. https://hardhat.org/ignition/docs
  33. https://hardhat.org/hardhat-vscode/docs
  34. https://hardhat.org/hardhat-network-helpers/docs
  35. https://hardhat.org/
  36. https://hardhat.org/docs/getting-started
  37. https://hardhat.org/plugins
  38. https://hardhat.org/hardhat2
  39. https://github.com/NomicFoundation/hardhat
  40. https://hardhat.org/docs/learn-more/using-viem#how-to-use-viem-with-hardhat
  41. https://viem.sh/
  42. https://hardhat.org/docs/learn-more/using-viem#setup
  43. https://hardhat.org/docs/learn-more/using-viem#connecting-to-networks
  44. https://hardhat.org/docs/learn-more/using-viem#using-viem-clients
  45. https://viem.sh/docs/clients/intro
  46. https://viem.sh/docs/clients/public
  47. https://viem.sh/docs/clients/wallet
  48. https://viem.sh/docs/clients/test
  49. https://hardhat.org/docs/learn-more/using-viem#deploying-and-interacting-with-contracts
  50. https://viem.sh/docs/contract/getContract
  51. https://hardhat.org/docs/learn-more/using-viem#using-contracts-from-an-npm-dependency
  52. https://hardhat.org/docs/learn-more/configuring-the-compiler#generating-artifacts-from-npm-dependencies
  53. https://hardhat.org/docs/learn-more/using-viem#viem-assertions
  54. https://hardhat.org/docs/learn-more/using-viem#type-safe-contract-interactions
  55. https://hardhat.org/docs/learn-more/using-viem#troubleshooting-contract-type-errors
  56. https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette
  57. https://hardhat.org/docs/learn-more/using-viem#using-viem-as-a-module
  58. https://github.com/NomicFoundation/hardhat-website/edit/main/src/content/docs/learn-more/using-viem.md

   Hidden links:
  60. https://hardhat.org/docs
  61. https://github.com/NomicFoundation/hardhat
  62. https://twitter.com/HardhatHQ
  63. https://hardhat.org/discord
  64. https://github.com/NomicFoundation/hardhat
  65. https://twitter.com/HardhatHQ
  66. https://hardhat.org/discord
  67. https://github.com/NomicFoundation/hardhat
  68. https://twitter.com/HardhatHQ
  69. https://hardhat.org/discord
